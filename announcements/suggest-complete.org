*Executive Summary 

Emacs has always provided a wealth of techniques for rapid keyboard
input (abbrev, dabbrev, hippie-expandand completion come to mind)---
and these affordances have significantly increased over the last few
years with the arrival of packages like =ido=, =company=, =a c=,
=helm= etc., each replete with different strategies for rapid task
completion such as flex and fuzzy matching. This article investigates
these tools in an eyes-free environment, specifically in the context
of Emacspeak.  I've not investigated every possible package in this
space --- instead, I've picked a collection of packages and techniques
that have worked well for me. Finally, the ultimate metric I use in
each case is the time to task completion --- since at the end of the
day, that's the only metric that counts when it comes to user
productivity.
* Terminology 

For this article, I will use terms /suggestion/ and /completion/ to
mean  subtly different concepts:

  - Suggestion :: Offer the user some /suggestions/ that help explore the
                  space of choices.
  - Completion  ::  Filter the available choices based on user input
                   with the goal of reaching the target as rapidly as possible.
  - Explore  ::  User does not necessarily know what he is looking
                for, but expects to be able to /recognize/ what he
                wants from the displayed choices.
  - Target  ::  User knows exactly what he wants, e.g., filename, or
               function-name, but would still like to get there with
               the fewest possible number of keystrokes.
  

Note that in practice, /suggestions/ and /completions/ work
hand-in-hand, with the visual display playing a central role in
guiding the user through the pace of available choices. In a typical
user interaction session, the space of suggestions gets filtered by
user input to produce the available completions (choices) for the next
round of user input. Thus, think of this as a
*suggest/explore/complete* interaction loop. Similarly, /explore/ and
/target/ type activities typically go hand-in-hand.


*  Tasks Where Suggestions And Completions Help Speed Up Task Completion

Here are exemplars of tasks that I perform often and where I require
all the help that Emacs can provide in completing the task as rapidly
as possible:

  1. Navigating to and opening a file  --- either code or prose.
  2. Jump  to a
    specific location (section, function, class/method, or pattern-match) in
     that file.
  3. Jump to an already open buffer in  a long-running Emacs.
  4. If that buffer existed --- but has since been killed (by
    =midnight= for example), then re-open that buffer.
  5. I do *everything* in Emacs, so open buffers include Web Pages
     (news sites, documentation, blog articles), IM Chats (I use
     =jabber=), Mail  Buffers --- both open folders and previously
     sent messages,  and much, much more.
  6. Easily launch media streams including local and streaming media.
  7. Open (or jump to an already open)  an EBook to continue reading.
  8.  Complete function/method-name  as I type  with an easy
     affordance to move among the available choices. The
     suggest/explore/complete interaction loop applies here as well.
     
  
Notice that as one performs all of these tasks, *every target* is an
Emacs buffer  or Emacs buffer location.

* Features Of Eyes-Free Interaction

Using spoken output --- as opposed to a rich visual display ---  has
the following special features:

  1. A large visual display can offer the user many choices at a time,
     and the eye's ability to rapidly scan these choices makes for an
     extremely fast *suggest/explore/complete* loop. As an example, an
     interface like=helm= can display a large number of initial
     choices, with the user  filtering these down with a few strategic key-presses.
  2. Spoken output takes time --- and there is simply no way around
     this --- speeding up speech-rate helps to a point, but speaking
     50 choices very fast does not help the user  in the /explore/
     phase. This means that  effective filtering and ranking of the available
     choices takes on added importance.
     

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Effective Suggest And Complete In An Eyes-Free Environment
#+DATE: <2018-06-22 Fri>
#+AUTHOR: T.V Raman
#+EMAIL: raman@google.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.13)
